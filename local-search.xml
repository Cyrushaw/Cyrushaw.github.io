<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/15/notes_of_C/"/>
    <url>/2024/03/15/notes_of_C/</url>
    
    <content type="html"><![CDATA[<h2 id="Notes-of-C"><a href="#Notes-of-C" class="headerlink" title="Notes of C"></a>Notes of C</h2><h3 id="link-list"><a href="#link-list" class="headerlink" title="link list"></a>link list</h3><p>If we has a pointer as input of function, we must consider whether it is NULL or not. We can’t visit any content of the pointer before we confirm it isn’t NULL.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span>&#123;<br>  <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>    ...<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="add-note-to-link-list"><a href="#add-note-to-link-list" class="headerlink" title="add note to link list"></a>add note to link list</h4><p>create a link list or add to head:<br>1 we always have the head of link list, otherwise we create head which points to NULL.</p><p>2 malloc space for new node and make new node’s next point to head.</p><p>3 let head point to new node.</p><h4 id="add-to-tail"><a href="#add-to-tail" class="headerlink" title="add to tail"></a>add to tail</h4><p>1 find the tail of the link list. if we don’t have a link list, create it first to make sure that tail doesn’t point to NULL.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//the code demonstrates how to find tail from head</span><br>node *tail = head;<br><span class="hljs-keyword">while</span>(tail-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>  tail = tail-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><p>2 malloc space for new node and make its next point to NULL.</p><p>3 make tail’s next point to new node</p><p>4 make tail point to new node</p><p>free link list</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">while</span>(head-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>  node *temp = head;<br>  head = head-&gt;next;<br>  <span class="hljs-built_in">free</span>(temp);<br>&#125;<br></code></pre></td></tr></table></figure><p>sometimes the data of a node is string. in this case, we should also malloc space for string while we malloc space for new node. if we want to free a node, we should free the string first.</p><h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><p>Hashtable is a kind of data structure similar to the reflection in math, like: keyA–dataA, keyB–dataB, keyC–dataC…</p><p>hashfunction can convert key to index of array, but sometimes different keys can be converted to the same index, which results in conflict</p><p>link list provides a solution to conflict. we can just link some data sharing the same index together</p><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>1 Argc and Argv: Argc is argument count, including the program itself. Argv is argument vector, and argv[0] is name of the program.  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/15/CS61C_20240304/"/>
    <url>/2024/03/15/CS61C_20240304/</url>
    
    <content type="html"><![CDATA[<h4 id="Lec01-Intro-and-Number-Representation"><a href="#Lec01-Intro-and-Number-Representation" class="headerlink" title="Lec01: Intro and Number Representation"></a>Lec01: Intro and Number Representation</h4><h5 id="Unsigned-Integers"><a href="#Unsigned-Integers" class="headerlink" title="Unsigned Integers"></a>Unsigned Integers</h5><h5 id="Signed-Integers"><a href="#Signed-Integers" class="headerlink" title="Signed Integers"></a>Signed Integers</h5><p>several methods to represent signed integers</p><ul><li>sign and magnitude*</li><li>biased notation</li><li>one’s complement*</li><li>two’s complement*</li></ul><p>learn how they can transform to signed integers and vice versa</p><p>learn how they can transform each other, directly and indirectly (with decimal’s help)</p><p>learn how we can get opposite number of them</p><p>especially for two’s complement</p><h5 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h5><h5 id="Sign-Extension"><a href="#Sign-Extension" class="headerlink" title="Sign Extension"></a>Sign Extension</h5><p>sign and magnitude: add 0’s after the sign bit</p><p>one’s complement: copy MSB</p><p>two’s complement: copy MSB</p><h5 id="conversion"><a href="#conversion" class="headerlink" title="conversion"></a>conversion</h5><p>decimal to binary</p><p>just divide the dividend by 2 until the dividend becomes 1 or 2</p><p>for two’s complement, the sum of positive number and negative number won’t overflow,</p><p>but if signs of two number are the same, then the sum has a chance of overflow</p><h4 id="Lec02-C-Intro-and-Pointers"><a href="#Lec02-C-Intro-and-Pointers" class="headerlink" title="Lec02: C Intro and Pointers"></a>Lec02: C Intro and Pointers</h4><h5 id="Structs-Alignment-and-Padding-in-C"><a href="#Structs-Alignment-and-Padding-in-C" class="headerlink" title="Structs Alignment and Padding in C"></a>Structs Alignment and Padding in C</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> &#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">foo</span> *<span class="hljs-title">c</span>;</span><br>&#125;<br><span class="hljs-comment">//sizeof(struct foo) == 12</span><br></code></pre></td></tr></table></figure><p>on a 32 bit architecture:</p><p>4 bytes for a, 1 byte for b, 3 unused bytes and 4 bytes for c</p><h5 id="Unions-in-C"><a href="#Unions-in-C" class="headerlink" title="Unions in C"></a>Unions in C</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">foo</span> &#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">foo</span> *<span class="hljs-title">c</span>;</span><br>&#125;<br><span class="hljs-comment">//int* x,y,z != int *x,*y,*z</span><br><span class="hljs-comment">//int* x,y,z == int *x,y,z</span><br></code></pre></td></tr></table></figure><p>it provides enough space for the largest element</p><p>interpret the only 32-bits (for example) number in different ways</p><h5 id="C-Syntax-main"><a href="#C-Syntax-main" class="headerlink" title="C Syntax: main"></a>C Syntax: main</h5><h6 id="To-get-arguments-to-the-main-function-use"><a href="#To-get-arguments-to-the-main-function-use" class="headerlink" title="To get arguments to the main function, use:"></a>To get arguments to the main function, use:</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br></code></pre></td></tr></table></figure><h6 id="What-does-this-mean"><a href="#What-does-this-mean" class="headerlink" title="What does this mean"></a>What does this mean</h6><ul><li>argument count contains the number of strings on the command line (the executable path counts as one, plus one for each argument)</li><li>argument value is an array containing pointers to the arguments as strings</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ ./foo hello <span class="hljs-number">87</span><br>#argc = <span class="hljs-number">3</span><br>#argv[<span class="hljs-number">0</span>] = &quot;./foo&quot;<br>#argv[<span class="hljs-number">1</span>] = &quot;hello&quot;<br>#argv[<span class="hljs-number">2</span>] = &quot;<span class="hljs-number">87</span>&quot;<br>#argv[<span class="hljs-number">3</span>] returns null or zero<br></code></pre></td></tr></table></figure><h5 id="C-Syntax-True-or-False"><a href="#C-Syntax-True-or-False" class="headerlink" title="C Syntax: True or False"></a>C Syntax: True or False</h5><ul><li>No explicit Boolean type in C</li><li>what evaluates to FALSE in C<ul><li>0 (integer)</li><li>NULL (a special kind of pointer)</li></ul></li><li>Anything that isn’t false is true</li></ul><h5 id="switch-and-break"><a href="#switch-and-break" class="headerlink" title="switch and break"></a>switch and break</h5><ul><li>case statement (switch) requires proper placement of break to work properly</li><li>“Fall through” effect: will execute all cases until a break is found</li></ul><h5 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h5><ul><li>Local variables in C are not initialized, they may contain anything</li><li>Declaring a pointer just allocates space to hold the pointer, it does not allocate the thing being pointed to</li></ul><h5 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h5><p>The difference between ++i and i++</p><h4 id="Lec03-C-Arrays-and-Strings"><a href="#Lec03-C-Arrays-and-Strings" class="headerlink" title="Lec03: C Arrays and Strings"></a>Lec03: C Arrays and Strings</h4><h5 id="Pointing-to-Different-Size-Objects"><a href="#Pointing-to-Different-Size-Objects" class="headerlink" title="Pointing to Different Size Objects"></a>Pointing to Different Size Objects</h5><p>pointers on a 32 bit architecture are 32 bits</p><p>type declaration tells compiler how many bytes to fetch on each access through pointer</p><h5 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h5><ul><li>Arrays: return size of whole array</li><li>Structs: return size of one instance of struct (sum of sizes of all struct variables + padding)</li></ul><h5 id="Struct-Alignment"><a href="#Struct-Alignment" class="headerlink" title="Struct Alignment"></a>Struct Alignment</h5><p>Some processors won’t allow you to address 32b values without being on 4 byte boundaries</p><p>others will just be very slow if you try to access “unaligned” memory</p><p><img src="/CS61C_20240304_images/image-20240304163310791.png" alt="image-20240304163310791"></p><p>Assume the default alignment rule is “32b architecture”</p><p>char: 1 byte, no alignment needed</p><p>short: 2 bytes, 1&#x2F;2 word aligned</p><p>int: 4 bytes, word aligned</p><p>结构体对齐位置：</p><p>如果成员是基本类型，它一定是该成员字节长度的整数倍；</p><p>如果成员也是一个数据结构，它一定是其内部数据结构中“最大类型字节数”的整数倍</p><p>think about how reduce the space of the upper struct</p><h5 id="Arrays-Basics"><a href="#Arrays-Basics" class="headerlink" title="Arrays Basics"></a>Arrays Basics</h5><p>we must pass the array and its size to any procedure that is going to manipulate it</p><p>use separate variable for array declaration, such as constant variable</p><p>an array variable is read-only (no assignment)</p><p>array name is not a variable, so the address of array name is meaningless, but its value is just the value of array name actually</p><p>array size gets lost when passed to a function, which means that if we print it, the result will be size of a pointer</p><h5 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h5><p>C String Standard Functions</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">char</span> *str1, <span class="hljs-type">char</span> *str2)</span>;<br><span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dst, <span class="hljs-type">char</span> *src)</span>;<br></code></pre></td></tr></table></figure><h5 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h5><ul><li>if we want to define a variable that can be changed in other functions, then we can define a pointer</li></ul><p><img src="/CS61C_20240304_images/image-20240304172340210.png" alt="image-20240304172340210"></p><ul><li><p>valid pointer arithmetic</p><ul><li>add an integer to a pointer</li><li>subtract 2  pointers</li><li>compare pointers (&lt;, &lt;&#x3D;, &#x3D;&#x3D;, !&#x3D;, &gt;, &gt;&#x3D;)</li><li>compare pointer to NULL (indicates that the pointer points to nothing)</li></ul></li><li><p>Pointers to Pointers</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//compare the following code and understand pointers to pointers carefully</span><br><span class="hljs-comment">//No.1</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">IncrementPtr</span><span class="hljs-params">(<span class="hljs-type">int</span> *p)</span>&#123;<br>    p = p + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> A[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>&#125;;<br><span class="hljs-type">int</span> *q = A;<br>IncrementPtr(q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*q = %d\n&quot;</span>, *q);<br><span class="hljs-comment">//No.2</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">IncrementPtr</span><span class="hljs-params">(<span class="hljs-type">int</span> **h)</span>&#123;<br>    *h = *h + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> A[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>&#125;;<br><span class="hljs-type">int</span> *q = A;<br>IncrementPtr(&amp;q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*q = %d\n&quot;</span>, *q);<br></code></pre></td></tr></table></figure><h4 id="Lec04-C-Memory-Management"><a href="#Lec04-C-Memory-Management" class="headerlink" title="Lec04: C Memory Management"></a>Lec04: C Memory Management</h4><h5 id="the-structure-of-stack-p7"><a href="#the-structure-of-stack-p7" class="headerlink" title="the structure of stack, p7"></a>the structure of stack, p7</h5><p>a stack frame: location of caller function, function arguments and space for local variables</p><h5 id="static-data-p11"><a href="#static-data-p11" class="headerlink" title="static data, p11"></a>static data, p11</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *str = <span class="hljs-string">&quot;hi&quot;</span>;<span class="hljs-comment">//static memory</span><br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;hi&quot;</span>;<span class="hljs-comment">//stack</span><br></code></pre></td></tr></table></figure><h5 id="endianness-p16"><a href="#endianness-p16" class="headerlink" title="endianness, p16"></a>endianness, p16</h5><h5 id="using-memory-we-don’t-own-p33"><a href="#using-memory-we-don’t-own-p33" class="headerlink" title="using memory we don’t own, p33"></a>using memory we don’t own, p33</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">next</span>;</span><br>    <span class="hljs-type">int</span> val;<br>&#125; Node;<br><span class="hljs-type">int</span> <span class="hljs-title function_">findLastNodeValue</span><span class="hljs-params">(Node* head)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(head-&gt;next != <span class="hljs-literal">NULL</span>)<br>        head = head-&gt;next;<br>    <span class="hljs-keyword">return</span> head-&gt;val;<br>&#125;<br></code></pre></td></tr></table></figure><p>reading or writing the 0th memory page will result in error</p><h5 id="Memory-Leaks-p42"><a href="#Memory-Leaks-p42" class="headerlink" title="Memory Leaks, p42"></a>Memory Leaks, p42</h5><p>if we want to do calculation to a pointer, we should copy it otherwise we will lose access to the pointer</p><p>rules of thumb: more mallocs than frees probably indicates a memory leak</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/15/RISCV/"/>
    <url>/2024/03/15/RISCV/</url>
    
    <content type="html"><![CDATA[<h2 id="RISV-V"><a href="#RISV-V" class="headerlink" title="RISV-V"></a>RISV-V</h2><h3 id="Base-Instructions"><a href="#Base-Instructions" class="headerlink" title="Base Instructions"></a>Base Instructions</h3><h4 id="Arithmetic-Instructions"><a href="#Arithmetic-Instructions" class="headerlink" title="Arithmetic Instructions"></a>Arithmetic Instructions</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">add </span>rd, rs1, rs2 <span class="hljs-comment">#Integer Addtion</span><br><span class="hljs-keyword">sub </span>rd, rs1, rs2 <span class="hljs-comment">#Integer Subtraction</span><br><span class="hljs-keyword">addi </span>rd, rs, imm<br><span class="hljs-keyword">mul </span>dst, src1, src2 <span class="hljs-comment">#multiplication and use lower 32 bits</span><br><span class="hljs-keyword">mulh </span>dst, src1, src2 <span class="hljs-comment">#multiplication and use upper 32 bits</span><br><span class="hljs-keyword">div </span>dst, src1, src2 <span class="hljs-comment">#quotient</span><br>rem dst, src1, src2 <span class="hljs-comment">#remainder</span><br></code></pre></td></tr></table></figure><h4 id="Bitwise-Instructions"><a href="#Bitwise-Instructions" class="headerlink" title="Bitwise Instructions"></a>Bitwise Instructions</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">and </span><span class="hljs-built_in">s1</span>,<span class="hljs-built_in">s2</span>, <span class="hljs-built_in">s3</span> <span class="hljs-comment">#and</span><br><span class="hljs-keyword">and </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, imm <span class="hljs-comment">#and immediate</span><br><span class="hljs-keyword">or </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, <span class="hljs-built_in">s3</span><br><span class="hljs-keyword">or </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, imm<br><span class="hljs-keyword">xor </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, <span class="hljs-built_in">s3</span><br><span class="hljs-keyword">xori </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, imm<br></code></pre></td></tr></table></figure><h4 id="Data-Transfer-Instructions"><a href="#Data-Transfer-Instructions" class="headerlink" title="Data Transfer Instructions"></a>Data Transfer Instructions</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">memop reg, off(bAddr)<br>#memop:<br>#lw-<span class="hljs-built_in">load</span> word, sw-store word<br>#lb-<span class="hljs-built_in">load</span> <span class="hljs-built_in">byte</span>, sb-store <span class="hljs-built_in">byte</span>, they utilize the least significant <span class="hljs-built_in">byte</span> of the register<br>#lh-<span class="hljs-built_in">load</span> half-word, sh-store half-word, they utilize the <span class="hljs-built_in">lower</span> <span class="hljs-number">16</span> bites of the register<br>#<span class="hljs-keyword">for</span> sb <span class="hljs-keyword">and</span> sh, <span class="hljs-built_in">upper</span> bits are ignored, but <span class="hljs-keyword">for</span> lb <span class="hljs-keyword">and</span> lh, <span class="hljs-built_in">upper</span> bits are filled by sign-extension<br>#lhu-<span class="hljs-built_in">load</span> half-word unsigned, lbu-<span class="hljs-built_in">load</span> <span class="hljs-built_in">byte</span> unsigned, <span class="hljs-built_in">upper</span> bits are filled by zero-extension<br></code></pre></td></tr></table></figure><h4 id="Control-Flow-Instructions"><a href="#Control-Flow-Instructions" class="headerlink" title="Control Flow Instructions"></a>Control Flow Instructions</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">beq </span>reg1, reg2, label <span class="hljs-comment">#branch if equal</span><br><span class="hljs-keyword">bne </span>reg1, reg2, label <span class="hljs-comment">#branch if not equal</span><br><span class="hljs-keyword">jal </span>reg, label <span class="hljs-comment">#jump and link, jal and j are PC indexed</span><br><span class="hljs-comment"># jal label #the default rd is ra</span><br><span class="hljs-keyword">jalr </span>reg1, reg2, off <span class="hljs-comment">#jump register and link</span><br><span class="hljs-comment"># jalr reg2 #the default rd is ra, and the default offset is zero</span><br><span class="hljs-comment"># think about how to use absolute address and absolute offset</span><br><span class="hljs-keyword">blt </span>reg1, reg2, label <span class="hljs-comment">#branch less than</span><br><span class="hljs-keyword">bge </span>reg1, reg2, label <span class="hljs-comment">#branch greater than or equal</span><br></code></pre></td></tr></table></figure><h4 id="Shifting-Instructions"><a href="#Shifting-Instructions" class="headerlink" title="Shifting Instructions"></a>Shifting Instructions</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sll </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, <span class="hljs-built_in">s3</span> <span class="hljs-comment">#shift left logical</span><br><span class="hljs-keyword">slli </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, imm<br><span class="hljs-keyword">srl </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, <span class="hljs-built_in">s3</span> <span class="hljs-comment">#shift right logical</span><br><span class="hljs-keyword">srli </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, imm<br><span class="hljs-keyword">sra </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, <span class="hljs-built_in">s3</span> <span class="hljs-comment">#shift right arithmetic</span><br><span class="hljs-keyword">srai </span><span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span>, imm<br></code></pre></td></tr></table></figure><h4 id="Compare-Instructions"><a href="#Compare-Instructions" class="headerlink" title="Compare Instructions"></a>Compare Instructions</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">slt </span>dst, reg1, reg2 <span class="hljs-comment">#set less than</span><br><span class="hljs-keyword">slti </span>dst, reg1, imm <span class="hljs-comment">#set less than immediate</span><br></code></pre></td></tr></table></figure><h4 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">the immeditate of the above immediate <span class="hljs-keyword">instructions </span>must <span class="hljs-keyword">be </span><span class="hljs-number">12</span> <span class="hljs-keyword">bits</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">because </span>we don<span class="hljs-string">&#x27;t have enough bits to represent 32 bits actually</span><br></code></pre></td></tr></table></figure><h3 id="Pseudo-Instructions"><a href="#Pseudo-Instructions" class="headerlink" title="Pseudo Instructions"></a>Pseudo Instructions</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">j</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-id">#unconditional</span> <span class="hljs-selector-tag">jump</span>, <span class="hljs-selector-tag">j</span> <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">jal</span> <span class="hljs-selector-tag">are</span> <span class="hljs-selector-tag">PC</span> <span class="hljs-selector-tag">indexed</span><br><span class="hljs-selector-tag">jr</span> <span class="hljs-selector-id">#jump</span> <span class="hljs-selector-tag">register</span><br><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">dst</span>, <span class="hljs-selector-tag">imm</span> <span class="hljs-selector-id">#load</span> <span class="hljs-number">32</span><span class="hljs-selector-tag">-bit</span> <span class="hljs-selector-tag">immediate</span>, <span class="hljs-number">32</span> <span class="hljs-selector-tag">bits</span> <span class="hljs-selector-tag">are</span> <span class="hljs-selector-tag">important</span><br><span class="hljs-selector-tag">la</span> <span class="hljs-selector-tag">dst</span>, <span class="hljs-selector-tag">label</span> <span class="hljs-selector-id">#load</span> <span class="hljs-selector-tag">address</span>, <span class="hljs-selector-tag">which</span> <span class="hljs-selector-tag">can</span> <span class="hljs-selector-tag">be</span> <span class="hljs-selector-tag">used</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">tranform</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">value</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">register</span><br></code></pre></td></tr></table></figure><h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">zero:</span> its value remains <span class="hljs-built_in">zero</span><br><span class="hljs-symbol">ra:</span> returned <span class="hljs-keyword">address</span><br><span class="hljs-keyword"></span><span class="hljs-symbol">sp:</span> stack pointer<br><span class="hljs-built_in">a0</span>-<span class="hljs-built_in">a7</span>: <span class="hljs-keyword">eight </span>arguments registers to pass parameters<br><span class="hljs-built_in">a0</span>-<span class="hljs-built_in">a1</span>: two argument registers also used to return values<br><span class="hljs-built_in">s0</span>-s11: saved registers<br><span class="hljs-built_in">t0</span>-<span class="hljs-built_in">t6</span>: temporary registers<br><br>for ecall<br><span class="hljs-symbol">a0:</span> its value detemines the effect of ecall<br><span class="hljs-symbol">a1:</span> ecall will print integer in <span class="hljs-built_in">a1</span> when <span class="hljs-built_in">a0</span> == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>our functions should abide by convention</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Prologue<br><span class="hljs-symbol">    func_label:</span>                                 <span class="hljs-comment">#frame</span><br>    <span class="hljs-keyword">addi </span><span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, -framesize                     <span class="hljs-comment">#frame</span><br>    <span class="hljs-keyword">sw </span><span class="hljs-built_in">ra</span>, &lt;framesize<span class="hljs-number">-4</span>&gt;(<span class="hljs-built_in">sp</span>)                    <span class="hljs-comment">#frame</span><br>    <span class="hljs-comment">#store other callee saved registers         #callee</span><br>    <span class="hljs-comment">#...                                        #body</span><br>    <span class="hljs-comment">#save other regs if need be                 #caller</span><br><span class="hljs-keyword">Body </span>                                       <br>    <span class="hljs-comment">#...other functions                         #body</span><br>Epilogue            <br>    <span class="hljs-comment">#restore other regs if need be              #caller</span><br>    <span class="hljs-comment">#restore other callee saved registers       #callee</span><br>    <span class="hljs-keyword">lw </span><span class="hljs-built_in">ra</span>, &lt;framesize<span class="hljs-number">-4</span>&gt;(<span class="hljs-built_in">sp</span>)                    <span class="hljs-comment">#frame</span><br>    <span class="hljs-keyword">addi </span><span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, framesize                      <span class="hljs-comment">#frame</span><br>    <span class="hljs-keyword">jr </span><span class="hljs-built_in">ra</span>                                       <span class="hljs-comment">#frame</span><br><br>Whenever we want to call a function, write the frame <span class="hljs-keyword">and </span><span class="hljs-keyword">body </span>first, then<br><span class="hljs-keyword">add </span>prologue <span class="hljs-keyword">and </span>epilogue on perspective of callee <span class="hljs-keyword">and </span>caller respectively<br>Whenever we want to use register s, we must save them first<br><span class="hljs-keyword">because </span>it is callee<span class="hljs-string">&#x27;s duty. </span><br><span class="hljs-string">Whenever we want to use register t or arguments in register a as caller, </span><br><span class="hljs-string">just use them, but remember to save them before we call another function</span><br><span class="hljs-string">because it is caller&#x27;</span>s duty.<br>When do we have to push <span class="hljs-built_in">ra</span> into stack?<br>We are not in main function <span class="hljs-keyword">and </span>we are going to call another function.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/15/notes_of_git/"/>
    <url>/2024/03/15/notes_of_git/</url>
    
    <content type="html"><![CDATA[<h2 id="Notes-Of-Git"><a href="#Notes-Of-Git" class="headerlink" title="Notes Of Git"></a>Notes Of Git</h2><h3 id="some-commands"><a href="#some-commands" class="headerlink" title="some commands"></a>some commands</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>git init<br>git config --global user.name [user-name]<br>git config --global user.email [user-email]<br><br>git status<br>git add .<br>git commit -m &quot;add git log&quot;<br>git push [remote-name] [branch-name]<br><br>git remote add [remote-name] [URL]<br>git remote rm [remote-name]<br>git remote -v<br><br>git log<br>git reflog<br>git reset --hard [VersionNo]<br>git branch<br>git branch [branch-name]<br>git checkout [branch-name]<br><br>git clone [URL]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>建站过程记录</title>
    <link href="/2024/01/29/%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/01/29/%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>这篇文章简单记录了本博客的搭建过程</p><h4 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1 工具准备"></a>1 工具准备</h4><h5 id="1-1-安装Git"><a href="#1-1-安装Git" class="headerlink" title="1.1 安装Git"></a>1.1 安装Git</h5><ul><li>地址：<a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></li><li>验证：命令行输入<code>git --version</code>，查看Git版本</li></ul><h5 id="1-2-安装Node-js"><a href="#1-2-安装Node-js" class="headerlink" title="1.2 安装Node.js"></a>1.2 安装Node.js</h5><ul><li>地址：<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></li><li>验证：命令行输入<code>node -v</code>，查看Node.js版本</li></ul><h4 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2 安装Hexo"></a>2 安装Hexo</h4><h5 id="2-1-安装cnpm"><a href="#2-1-安装cnpm" class="headerlink" title="2.1 安装cnpm"></a>2.1 安装cnpm</h5><ul><li>命令：<code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code></li><li>验证：命令行输入<code>cnpm -v</code>，查看cnpm版本</li></ul><h5 id="2-2-安装hexo"><a href="#2-2-安装hexo" class="headerlink" title="2.2 安装hexo"></a>2.2 安装hexo</h5><ul><li>命令：<code>cnpm install -g hexo-cli</code></li><li>验证：命令行输入<code>hexo -v</code>，查看hexo版本</li></ul><h4 id="3-配置Github"><a href="#3-配置Github" class="headerlink" title="3 配置Github"></a>3 配置Github</h4><h5 id="3-1-建立仓库"><a href="#3-1-建立仓库" class="headerlink" title="3.1 建立仓库"></a>3.1 建立仓库</h5><p>新建一个名称为<code>username.github.io</code>的仓库，username为Github用户名</p><p><img src="/../img/posts/%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95_images/image-20240129151827334.png" alt="image-20240129151827334"></p><h5 id="3-2-配置SSH免密登录"><a href="#3-2-配置SSH免密登录" class="headerlink" title="3.2 配置SSH免密登录"></a>3.2 配置SSH免密登录</h5><ul><li><p>删除本地文件夹C:\Users\YourUsername\.ssh（如果没有直接进入下一步）</p></li><li><p>在C:\Users\YourUsername目录下右键打开<code>Git Bash Here</code>，输入命令<code>ssh -keygen -t rsa -C &quot;Github登录邮箱&quot;</code>，生成.ssh密钥，然后直接输入三次回车，出现提示”The key’s randomart image is:”代表成功</p></li><li><p>找到C:\Users\YourUsername\.ssh\id_rsa.pub文件，复制里面的内容</p></li><li><p>在Github主页上找到Settings\SSH and GPG keys\New SSH key，把内容粘进去，取一个title然后保存</p></li></ul><p><img src="/../img/posts/%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95_images/image-20240129151619645.png" alt="image-20240129151619645"></p><ul><li>验证：命令行输入<code>ssh -T git@github.com</code></li></ul><h5 id="3-3-其他配置"><a href="#3-3-其他配置" class="headerlink" title="3.3 其他配置"></a>3.3 其他配置</h5><ul><li>命令：<code>git config --global user.name &quot;Github用户名&quot;</code></li><li>命令：<code>git config --global user.email &quot;Github注册邮箱&quot;</code></li></ul><h4 id="4-搭建博客"><a href="#4-搭建博客" class="headerlink" title="4 搭建博客"></a>4 搭建博客</h4><h5 id="4-1-本地配置"><a href="#4-1-本地配置" class="headerlink" title="4.1 本地配置"></a>4.1 本地配置</h5><ul><li><p>本地新建文件夹用于存放代码，例如D:\hexoblog</p></li><li><p>在D:\hexoblog目录下右键打开<code>Git Bash Here</code>，输入初始化命令<code>hexo init</code></p></li><li><p>生成本地文件：<code>hexo g</code></p></li><li><p>本地预览：<code>hexo s</code>，打开浏览器访问<a href="http://localhost:4000/">http://localhost:4000</a> 即可预览博客内容</p></li></ul><h5 id="4-2-部署到Github"><a href="#4-2-部署到Github" class="headerlink" title="4.2 部署到Github"></a>4.2 部署到Github</h5><ul><li><p>在D:\hexoblog下安装hexo-deployer-git插件：<code>npm install hexo-deployer-git --save</code></p></li><li><p>找到D:\hexoblog目录下配置文件_config.yml，末尾添加：</p></li></ul><p><img src="/../img/posts/%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95_images/image-20240129154857495.png" alt="image-20240129154857495"></p><p>其中repository为Github个人主页链接地址</p><ul><li>将本地文件推送到Github仓库：<code>hexo d</code>，之后就可以使用<a href="https://cyrushaw.github.io/">https://Cyrushaw.github.io</a> 访问博客了</li></ul><h4 id="5-配置主题"><a href="#5-配置主题" class="headerlink" title="5 配置主题"></a>5 配置主题</h4><ul><li><p><a href="https://hexo.io/themes/">Themes | Hexo</a>为我们提供了很多主题，可以根据自己的喜好选择使用。我使用的是Fluid主题，该主题的Github主页<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a></p></li><li><p>获取主题：在D:\hexoblog下<code>git clone https://github.com/fluid-dev/hexo-theme-fluid themes/fluid</code></p></li><li><p>使用主题：找到D:\hexoblog下配置文件_config.yml，将里面的theme:landscape改成theme:fluid即可，然后依次执行<code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code></p></li><li><p>等待一段时间后，再次进入博客网站，发现主题已更新</p></li><li><p>关于对主题的修改可以参考该主题Github主页的说明，fluid主题的用户手册<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></p></li></ul><h4 id="6-开始创作"><a href="#6-开始创作" class="headerlink" title="6 开始创作"></a>6 开始创作</h4><ul><li>在hexoblog\source\_posts目录下新建.md文章，具体内容的格式参考主题说明</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://zhuanlan.zhihu.com/p/547520780">https://zhuanlan.zhihu.com/p/547520780</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
